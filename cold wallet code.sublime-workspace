{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 10196,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					330,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAJYeAAAAAAAAAAAAAAAA8L8"
				],
				[
					335,
					1,
					"paste",
					null,
					"AgAAAKYgAAAAAAAAUiEAAAAAAAAAAAAAUiEAAAAAAABSIQAAAAAAABMAAAAgICAgc3VibWl0X2J1dHRvbiA9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmIAAAAAAAALkgAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAFIhAAAAAAAAAAAAAAAA8L8"
				],
				[
					359,
					1,
					"paste",
					null,
					"AgAAACogAAAAAAAA0CEAAAAAAAAAAAAA0CEAAAAAAADQIQAAAAAAAAsAAABwaW5fY29uZmlybQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqIAAAAAAAADUgAAAAAAAAAAAAAAAA8L8"
				],
				[
					364,
					1,
					"right_delete",
					null,
					"AQAAAC0gAAAAAAAALSAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtIAAAAAAAAC0gAAAAAAAAAAAAAAAA8L8"
				],
				[
					365,
					1,
					"left_delete",
					null,
					"AQAAACogAAAAAAAAKiAAAAAAAAADAAAAICAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAtIAAAAAAAAC0gAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAMwhAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAALMgAAAAAAAAtCAAAAAAAAAAAAAAtCAAAAAAAAC4IAAAAAAAAAAAAAC0IAAAAAAAALQgAAAAAAAABAAAACAgICC0IAAAAAAAALwgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzIAAAAAAAALMgAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAALggAAAAAAAAuCAAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8IAAAAAAAALwgAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"paste",
					null,
					"AQAAALggAAAAAAAAOyUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4IAAAAAAAALggAAAAAAAAAAAAAAAA8L8"
				],
				[
					408,
					1,
					"paste",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAADslAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtxAAAAAAAAAAAAAAtxAAAAAAAAC3EAAAAAAAAKoQAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHRraW50ZXIgYXMgdGsKaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmZyb20gY3J5cHRvZ3JhcGh5LmZlcm5ldCBpbXBvcnQgRmVybmV0CmZyb20gZXRoX2FjY291bnQgaW1wb3J0IEFjY291bnQKZnJvbSBiaXRjb2lubGliLndhbGxldHMgaW1wb3J0IFdhbGxldApmcm9tIGd1aSBpbXBvcnQgV2FsbGV0R1VJCgpXQUxMRVRfRklMRSA9ICJ3YWxsZXRfaW5mby5lbmMiClBJTl9GSUxFID0gInBpbi5lbmMiCgpkZWYgbG9hZF9rZXkoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKCJzZWNyZXQua2V5Iik6CiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgInJiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIHJldHVybiBrZXlfZmlsZS5yZWFkKCkKICAgIGVsc2U6CiAgICAgICAga2V5ID0gRmVybmV0LmdlbmVyYXRlX2tleSgpCiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgIndiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIGtleV9maWxlLndyaXRlKGtleSkKICAgICAgICByZXR1cm4ga2V5CgpkZWYgZW5jcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5lbmNyeXB0KGRhdGEuZW5jb2RlKCkpCgpkZWYgZGVjcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5kZWNyeXB0KGRhdGEpLmRlY29kZSgpCgpkZWYgZ2V0X3BpbihrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoUElOX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihQSU5fRklMRSwgInJiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9waW4gPSBwaW5fZmlsZS5yZWFkKCkKICAgICAgICBwaW4gPSBkZWNyeXB0KGVuY3J5cHRlZF9waW4sIGtleSkKICAgIGVsc2U6CiAgICAgICAgcGluID0gTm9uZQogICAgcmV0dXJuIHBpbgoKZGVmIHNldF9waW4obmV3X3Bpbiwga2V5KToKICAgIGVuY3J5cHRlZF9waW4gPSBlbmNyeXB0KG5ld19waW4sIGtleSkKICAgIHdpdGggb3BlbihQSU5fRklMRSwgIndiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgcGluX2ZpbGUud3JpdGUoZW5jcnlwdGVkX3BpbikKCmRlZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgIGlmIGVudGVyZWRfcGluID09IHN0b3JlZF9waW46CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIkluY29ycmVjdCBQSU4uIikKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBsb2FkX3dhbGxldF9pbmZvKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhXQUxMRVRfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAicmIiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB3YWxsZXRfZmlsZS5yZWFkKCkKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkZWNyeXB0KGVuY3J5cHRlZF9kYXRhLCBrZXkpKQogICAgZWxzZToKICAgICAgICB3YWxsZXRfaW5mbyA9IHsKICAgICAgICAgICAgImJpdGNvaW4iOiB7IndhbGxldCI6ICJiaXRjb2luX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImJpdGNvaW5fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJldGhlcmV1bSI6IHsid2FsbGV0IjogImV0aGVyZXVtX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImV0aGVyZXVtX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAieHJwIjogeyJ3YWxsZXQiOiAieHJwX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInhycF9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInNoaWJhX2ludSI6IHsid2FsbGV0IjogInNoaWJhX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInNoaWJhX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB3YWxsZXRfaW5mbwoKZGVmIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSk6CiAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJ3YiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgIGVuY3J5cHRlZF9kYXRhID0gZW5jcnlwdChqc29uLmR1bXBzKHdhbGxldF9pbmZvKSwga2V5KQogICAgICAgIHdhbGxldF9maWxlLndyaXRlKGVuY3J5cHRlZF9kYXRhKQoKZGVmIGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKToKICAgIGlmIGNyeXB0b190eXBlID09ICJldGhlcmV1bSI6CiAgICAgICAgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlKCkKICAgICAgICByZXR1cm4gYWNjb3VudC5hZGRyZXNzLCBhY2NvdW50LmtleS5oZXgoKQogICAgZWxzZToKICAgICAgICB3YWxsZXQgPSBXYWxsZXQuY3JlYXRlKGYnVVNCV2FsbGV0X3tjcnlwdG9fdHlwZX0nKQogICAgICAgIGtleSA9IHdhbGxldC5uZXdfa2V5KCkKICAgICAgICByZXR1cm4ga2V5LmFkZHJlc3MsIGtleS5wcml2YXRlX2hleAoKZGVmIG9uX3Bpbl9lbnRyeShldmVudD1Ob25lKToKICAgIHN0b3JlZF9waW4gPSBnZXRfcGluKGtleSkKICAgIGVudGVyZWRfcGluID0gZ3VpLnBpbl9lbnRyeS5nZXQoKQogICAgaWYgc3RvcmVkX3BpbjoKICAgICAgICBpZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgICAgICAgICAgcGluX3dpbmRvdy53aXRoZHJhdygpCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICBlbHNlOgogICAgICAgIGNvbmZpcm1fcGluID0gZ3VpLnBpbl9jb25maXJtX2VudHJ5LmdldCgpCiAgICAgICAgaWYgZW50ZXJlZF9waW4gPT0gY29uZmlybV9waW46CiAgICAgICAgICAgIHNldF9waW4oZW50ZXJlZF9waW4sIGtleSkKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93aW5mbygiU3VjY2VzcyIsICJOZXcgUElOIHNldCBzdWNjZXNzZnVsbHkuIikKICAgICAgICAgICAgcGluX3dpbmRvdy53aXRoZHJhdygpCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIlBJTnMgZG8gbm90IG1hdGNoLiBUcnkgYWdhaW4uIikKCmRlZiB2aWV3X2tleXMoY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIGlmIGNyeXB0b190eXBlIGluIHdhbGxldF9pbmZvOgogICAgICAgIHB1Yl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdCiAgICAgICAgcHJpdl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0KICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKGYie2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0gS2V5cyIsIGYiUHVibGljIEtleToge3B1Yl9rZXl9XG5Qcml2YXRlIEtleToge3ByaXZfa2V5fSIpCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsIGYiTm8ga2V5cyBmb3VuZCBmb3Ige2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0uIikKCmRlZiBvbl9nZW5lcmF0ZV9hZGRyZXNzKHdhbGxldF9mcmFtZSwgY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIG5ld19hZGRyZXNzLCBwcml2YXRlX2tleSA9IGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKQogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXSA9IG5ld19hZGRyZXNzCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0gPSBwcml2YXRlX2tleQogICAgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KQoKICAgICMgUmVmcmVzaCB3YWxsZXQgd2luZG93CiAgICBndWkub3Blbl93YWxsZXRfd2luZG93KHdhbGxldF9pbmZvLCBrZXkpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAga2V5ID0gbG9hZF9rZXkoKQogICAgcGluID0gZ2V0X3BpbihrZXkpCiAgICAKICAgIHBpbl93aW5kb3cgPSB0dGsuV2luZG93KHRoZW1lbmFtZT0iZGFya2x5IikKICAgIGd1aSA9IFdhbGxldEdVSShwaW5fd2luZG93LCBvbl9nZW5lcmF0ZV9hZGRyZXNzLCB2aWV3X2tleXMsIFdhbGxldEdVSS5jb3B5X3RvX2NsaXBib2FyZCkKICAgIGd1aS5zaG93X3Bpbl93aW5kb3cob25fcGluX2VudHJ5KQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAKoQAAAAAAAAAAAAAAAA8L8"
				],
				[
					424,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAA+A8AAAAAAAAAAAAA+A8AAAAAAAD4DwAAAAAAALcQAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHRraW50ZXIgYXMgdGsKaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmZyb20gY3J5cHRvZ3JhcGh5LmZlcm5ldCBpbXBvcnQgRmVybmV0CmZyb20gZXRoX2FjY291bnQgaW1wb3J0IEFjY291bnQKZnJvbSBiaXRjb2lubGliLndhbGxldHMgaW1wb3J0IFdhbGxldApmcm9tIGd1aSBpbXBvcnQgV2FsbGV0R1VJCgpXQUxMRVRfRklMRSA9ICJ3YWxsZXRfaW5mby5lbmMiClBJTl9GSUxFID0gInBpbi5lbmMiCgpkZWYgbG9hZF9rZXkoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKCJzZWNyZXQua2V5Iik6CiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgInJiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIHJldHVybiBrZXlfZmlsZS5yZWFkKCkKICAgIGVsc2U6CiAgICAgICAga2V5ID0gRmVybmV0LmdlbmVyYXRlX2tleSgpCiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgIndiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIGtleV9maWxlLndyaXRlKGtleSkKICAgICAgICByZXR1cm4ga2V5CgpkZWYgZW5jcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5lbmNyeXB0KGRhdGEuZW5jb2RlKCkpCgpkZWYgZGVjcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5kZWNyeXB0KGRhdGEpLmRlY29kZSgpCgpkZWYgZ2V0X3BpbihrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoUElOX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihQSU5fRklMRSwgInJiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9waW4gPSBwaW5fZmlsZS5yZWFkKCkKICAgICAgICBwaW4gPSBkZWNyeXB0KGVuY3J5cHRlZF9waW4sIGtleSkKICAgIGVsc2U6CiAgICAgICAgcGluID0gTm9uZQogICAgcmV0dXJuIHBpbgoKZGVmIHNldF9waW4obmV3X3Bpbiwga2V5KToKICAgIGVuY3J5cHRlZF9waW4gPSBlbmNyeXB0KG5ld19waW4sIGtleSkKICAgIHdpdGggb3BlbihQSU5fRklMRSwgIndiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgcGluX2ZpbGUud3JpdGUoZW5jcnlwdGVkX3BpbikKCmRlZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgIGlmIGVudGVyZWRfcGluID09IHN0b3JlZF9waW46CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIkluY29ycmVjdCBQSU4uIikKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBsb2FkX3dhbGxldF9pbmZvKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhXQUxMRVRfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAicmIiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB3YWxsZXRfZmlsZS5yZWFkKCkKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkZWNyeXB0KGVuY3J5cHRlZF9kYXRhLCBrZXkpKQogICAgZWxzZToKICAgICAgICB3YWxsZXRfaW5mbyA9IHsKICAgICAgICAgICAgImJpdGNvaW4iOiB7IndhbGxldCI6ICJiaXRjb2luX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImJpdGNvaW5fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJldGhlcmV1bSI6IHsid2FsbGV0IjogImV0aGVyZXVtX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImV0aGVyZXVtX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAieHJwIjogeyJ3YWxsZXQiOiAieHJwX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInhycF9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInNoaWJhX2ludSI6IHsid2FsbGV0IjogInNoaWJhX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInNoaWJhX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB3YWxsZXRfaW5mbwoKZGVmIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSk6CiAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJ3YiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgIGVuY3J5cHRlZF9kYXRhID0gZW5jcnlwdChqc29uLmR1bXBzKHdhbGxldF9pbmZvKSwga2V5KQogICAgICAgIHdhbGxldF9maWxlLndyaXRlKGVuY3J5cHRlZF9kYXRhKQoKZGVmIGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKToKICAgIGlmIGNyeXB0b190eXBlID09ICJldGhlcmV1bSI6CiAgICAgICAgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlKCkKICAgICAgICByZXR1cm4gYWNjb3VudC5hZGRyZXNzLCBhY2NvdW50LmtleS5oZXgoKQogICAgZWxzZToKICAgICAgICB3YWxsZXQgPSBXYWxsZXQuY3JlYXRlKGYnVVNCV2FsbGV0X3tjcnlwdG9fdHlwZX0nKQogICAgICAgIGtleSA9IHdhbGxldC5uZXdfa2V5KCkKICAgICAgICByZXR1cm4ga2V5LmFkZHJlc3MsIGtleS5wcml2YXRlX2hleAoKZGVmIG9uX3Bpbl9lbnRyeShldmVudD1Ob25lKToKICAgIHN0b3JlZF9waW4gPSBnZXRfcGluKGtleSkKICAgIGVudGVyZWRfcGluID0gZ3VpLnBpbl9lbnRyeS5nZXQoKQogICAgaWYgc3RvcmVkX3BpbjoKICAgICAgICBpZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgICAgICAgICAgZ3VpLnBpbl93aW5kb3cud2l0aGRyYXcoKQogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgZWxzZToKICAgICAgICBjb25maXJtX3BpbiA9IGd1aS5waW5fY29uZmlybV9lbnRyeS5nZXQoKQogICAgICAgIGlmIGVudGVyZWRfcGluID09IGNvbmZpcm1fcGluOgogICAgICAgICAgICBzZXRfcGluKGVudGVyZWRfcGluLCBrZXkpCiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oIlN1Y2Nlc3MiLCAiTmV3IFBJTiBzZXQgc3VjY2Vzc2Z1bGx5LiIpCiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LndpdGhkcmF3KCkKICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiUElOcyBkbyBub3QgbWF0Y2guIFRyeSBhZ2Fpbi4iKQoKZGVmIHZpZXdfa2V5cyhjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgaWYgY3J5cHRvX3R5cGUgaW4gd2FsbGV0X2luZm86CiAgICAgICAgcHViX2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0KICAgICAgICBwcml2X2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXQogICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oZiJ7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfSBLZXlzIiwgZiJQdWJsaWMgS2V5OiB7cHViX2tleX1cblByaXZhdGUgS2V5OiB7cHJpdl9rZXl9IikKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgZiJObyBrZXlzIGZvdW5kIGZvciB7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfS4iKQoKZGVmIG9uX2dlbmVyYXRlX2FkZHJlc3Mod2FsbGV0X2ZyYW1lLCBjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgbmV3X2FkZHJlc3MsIHByaXZhdGVfa2V5ID0gZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdID0gbmV3X2FkZHJlc3MKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXSA9IHByaXZhdGVfa2V5CiAgICBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpCgogICAgIyBSZWZyZXNoIHdhbGxldCB3aW5kb3cKICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cod2FsbGV0X2luZm8sIGtleSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBrZXkgPSBsb2FkX2tleSgpCiAgICBwaW4gPSBnZXRfcGluKGtleSkKICAgIAogICAgcGluX3dpbmRvdyA9IHR0ay5XaW5kb3codGhlbWVuYW1lPSJkYXJrbHkiKQogICAgZ3VpID0gV2FsbGV0R1VJKHBpbl93aW5kb3csIG9uX2dlbmVyYXRlX2FkZHJlc3MsIHZpZXdfa2V5cywgV2FsbGV0R1VJLmNvcHlfdG9fY2xpcGJvYXJkKQogICAgZ3VpLnNob3dfcGluX3dpbmRvdyhvbl9waW5fZW50cnksIHBpbikK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAALcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					431,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAuBAAAAAAAAAAAAAAuBAAAAAAAAC4EAAAAAAAAPgPAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHRraW50ZXIgYXMgdGsKaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmZyb20gY3J5cHRvZ3JhcGh5LmZlcm5ldCBpbXBvcnQgRmVybmV0CmZyb20gZXRoX2FjY291bnQgaW1wb3J0IEFjY291bnQKZnJvbSBiaXRjb2lubGliLndhbGxldHMgaW1wb3J0IFdhbGxldApmcm9tIGd1aSBpbXBvcnQgV2FsbGV0R1VJCgpXQUxMRVRfRklMRSA9ICJ3YWxsZXRfaW5mby5lbmMiClBJTl9GSUxFID0gInBpbi5lbmMiCgpkZWYgbG9hZF9rZXkoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKCJzZWNyZXQua2V5Iik6CiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgInJiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIHJldHVybiBrZXlfZmlsZS5yZWFkKCkKICAgIGVsc2U6CiAgICAgICAga2V5ID0gRmVybmV0LmdlbmVyYXRlX2tleSgpCiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgIndiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIGtleV9maWxlLndyaXRlKGtleSkKICAgICAgICByZXR1cm4ga2V5CgpkZWYgZW5jcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5lbmNyeXB0KGRhdGEuZW5jb2RlKCkpCgpkZWYgZGVjcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5kZWNyeXB0KGRhdGEpLmRlY29kZSgpCgpkZWYgZ2V0X3BpbihrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoUElOX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihQSU5fRklMRSwgInJiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9waW4gPSBwaW5fZmlsZS5yZWFkKCkKICAgICAgICBwaW4gPSBkZWNyeXB0KGVuY3J5cHRlZF9waW4sIGtleSkKICAgIGVsc2U6CiAgICAgICAgcGluID0gTm9uZQogICAgcmV0dXJuIHBpbgoKZGVmIHNldF9waW4obmV3X3Bpbiwga2V5KToKICAgIGVuY3J5cHRlZF9waW4gPSBlbmNyeXB0KG5ld19waW4sIGtleSkKICAgIHdpdGggb3BlbihQSU5fRklMRSwgIndiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgcGluX2ZpbGUud3JpdGUoZW5jcnlwdGVkX3BpbikKCmRlZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgIGlmIGVudGVyZWRfcGluID09IHN0b3JlZF9waW46CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIkluY29ycmVjdCBQSU4uIikKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBsb2FkX3dhbGxldF9pbmZvKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhXQUxMRVRfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAicmIiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB3YWxsZXRfZmlsZS5yZWFkKCkKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkZWNyeXB0KGVuY3J5cHRlZF9kYXRhLCBrZXkpKQogICAgZWxzZToKICAgICAgICB3YWxsZXRfaW5mbyA9IHsKICAgICAgICAgICAgImJpdGNvaW4iOiB7IndhbGxldCI6ICJiaXRjb2luX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImJpdGNvaW5fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJldGhlcmV1bSI6IHsid2FsbGV0IjogImV0aGVyZXVtX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImV0aGVyZXVtX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAieHJwIjogeyJ3YWxsZXQiOiAieHJwX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInhycF9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInNoaWJhX2ludSI6IHsid2FsbGV0IjogInNoaWJhX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInNoaWJhX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB3YWxsZXRfaW5mbwoKZGVmIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSk6CiAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJ3YiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgIGVuY3J5cHRlZF9kYXRhID0gZW5jcnlwdChqc29uLmR1bXBzKHdhbGxldF9pbmZvKSwga2V5KQogICAgICAgIHdhbGxldF9maWxlLndyaXRlKGVuY3J5cHRlZF9kYXRhKQoKZGVmIGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKToKICAgIGlmIGNyeXB0b190eXBlID09ICJldGhlcmV1bSI6CiAgICAgICAgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlKCkKICAgICAgICByZXR1cm4gYWNjb3VudC5hZGRyZXNzLCBhY2NvdW50LmtleS5oZXgoKQogICAgZWxzZToKICAgICAgICB3YWxsZXQgPSBXYWxsZXQuY3JlYXRlKGYnVVNCV2FsbGV0X3tjcnlwdG9fdHlwZX0nKQogICAgICAgIGtleSA9IHdhbGxldC5uZXdfa2V5KCkKICAgICAgICByZXR1cm4ga2V5LmFkZHJlc3MsIGtleS5wcml2YXRlX2hleAoKZGVmIG9uX3Bpbl9lbnRyeShldmVudD1Ob25lKToKICAgIHN0b3JlZF9waW4gPSBnZXRfcGluKGtleSkKICAgIGVudGVyZWRfcGluID0gZ3VpLnBpbl9lbnRyeS5nZXQoKQogICAgaWYgc3RvcmVkX3BpbjoKICAgICAgICBpZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgICAgICAgICAgZ3VpLnBpbl93aW5kb3cud2l0aGRyYXcoKQogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgZWxzZToKICAgICAgICBjb25maXJtX3BpbiA9IGd1aS5waW5fY29uZmlybV9lbnRyeS5nZXQoKQogICAgICAgIGlmIGVudGVyZWRfcGluID09IGNvbmZpcm1fcGluOgogICAgICAgICAgICBzZXRfcGluKGVudGVyZWRfcGluLCBrZXkpCiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oIlN1Y2Nlc3MiLCAiTmV3IFBJTiBzZXQgc3VjY2Vzc2Z1bGx5LiIpCiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LndpdGhkcmF3KCkKICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiUElOcyBkbyBub3QgbWF0Y2guIFRyeSBhZ2Fpbi4iKQoKZGVmIHZpZXdfa2V5cyhjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgaWYgY3J5cHRvX3R5cGUgaW4gd2FsbGV0X2luZm86CiAgICAgICAgcHViX2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0KICAgICAgICBwcml2X2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXQogICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oZiJ7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfSBLZXlzIiwgZiJQdWJsaWMgS2V5OiB7cHViX2tleX1cblByaXZhdGUgS2V5OiB7cHJpdl9rZXl9IikKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgZiJObyBrZXlzIGZvdW5kIGZvciB7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfS4iKQoKZGVmIG9uX2dlbmVyYXRlX2FkZHJlc3Mod2FsbGV0X2ZyYW1lLCBjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgbmV3X2FkZHJlc3MsIHByaXZhdGVfa2V5ID0gZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdID0gbmV3X2FkZHJlc3MKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXSA9IHByaXZhdGVfa2V5CiAgICBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpCgogICAgIyBSZWZyZXNoIHdhbGxldCB3aW5kb3cKICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cod2FsbGV0X2luZm8sIGtleSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBrZXkgPSBsb2FkX2tleSgpCiAgICBwaW4gPSBnZXRfcGluKGtleQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAPgPAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAtxAAAAAAAAAAAAAAtxAAAAAAAAC3EAAAAAAAALgQAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHRraW50ZXIgYXMgdGsKaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmZyb20gY3J5cHRvZ3JhcGh5LmZlcm5ldCBpbXBvcnQgRmVybmV0CmZyb20gZXRoX2FjY291bnQgaW1wb3J0IEFjY291bnQKZnJvbSBiaXRjb2lubGliLndhbGxldHMgaW1wb3J0IFdhbGxldApmcm9tIGd1aSBpbXBvcnQgV2FsbGV0R1VJCgpXQUxMRVRfRklMRSA9ICJ3YWxsZXRfaW5mby5lbmMiClBJTl9GSUxFID0gInBpbi5lbmMiCgpkZWYgbG9hZF9rZXkoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKCJzZWNyZXQua2V5Iik6CiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgInJiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIHJldHVybiBrZXlfZmlsZS5yZWFkKCkKICAgIGVsc2U6CiAgICAgICAga2V5ID0gRmVybmV0LmdlbmVyYXRlX2tleSgpCiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgIndiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIGtleV9maWxlLndyaXRlKGtleSkKICAgICAgICByZXR1cm4ga2V5CgpkZWYgZW5jcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5lbmNyeXB0KGRhdGEuZW5jb2RlKCkpCgpkZWYgZGVjcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5kZWNyeXB0KGRhdGEpLmRlY29kZSgpCgpkZWYgZ2V0X3BpbihrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoUElOX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihQSU5fRklMRSwgInJiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9waW4gPSBwaW5fZmlsZS5yZWFkKCkKICAgICAgICBwaW4gPSBkZWNyeXB0KGVuY3J5cHRlZF9waW4sIGtleSkKICAgIGVsc2U6CiAgICAgICAgcGluID0gTm9uZQogICAgcmV0dXJuIHBpbgoKZGVmIHNldF9waW4obmV3X3Bpbiwga2V5KToKICAgIGVuY3J5cHRlZF9waW4gPSBlbmNyeXB0KG5ld19waW4sIGtleSkKICAgIHdpdGggb3BlbihQSU5fRklMRSwgIndiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgcGluX2ZpbGUud3JpdGUoZW5jcnlwdGVkX3BpbikKCmRlZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgIGlmIGVudGVyZWRfcGluID09IHN0b3JlZF9waW46CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIkluY29ycmVjdCBQSU4uIikKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBsb2FkX3dhbGxldF9pbmZvKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhXQUxMRVRfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAicmIiKSBhcyB3YWxsZXRfZmlsZSk6CiAgICAgICAgICAgIGVuY3J5cHRlZF9kYXRhID0gd2FsbGV0X2ZpbGUucmVhZCgpCiAgICAgICAgcmV0dXJuIGpzb24ubG9hZHMoZGVjcnlwdChlbmNyeXB0ZWRfZGF0YSwga2V5KSkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0X2luZm8gPSB7CiAgICAgICAgICAgICJiaXRjb2luIjogeyJ3YWxsZXQiOiAiYml0Y29pbl93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJiaXRjb2luX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAiZXRoZXJldW0iOiB7IndhbGxldCI6ICJldGhlcmV1bV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJldGhlcmV1bV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInhycCI6IHsid2FsbGV0IjogInhycF93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJ4cnBfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJzaGliYV9pbnUiOiB7IndhbGxldCI6ICJzaGliYV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJzaGliYV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfQogICAgICAgIH0KICAgICAgICByZXR1cm4gd2FsbGV0X2luZm8KCmRlZiBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpOgogICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAid2IiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IGVuY3J5cHQoanNvbi5kdW1wcyh3YWxsZXRfaW5mbyksIGtleSkKICAgICAgICB3YWxsZXRfZmlsZS53cml0ZShlbmNyeXB0ZWRfZGF0YSkKCmRlZiBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSk6CiAgICBpZiBjcnlwdG9fdHlwZSA9PSAiZXRoZXJldW0iOgogICAgICAgIGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZSgpCiAgICAgICAgcmV0dXJuIGFjY291bnQuYWRkcmVzcywgYWNjb3VudC5rZXkuaGV4KCkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0ID0gV2FsbGV0LmNyZWF0ZShmJ1VTQldhbGxldF97Y3J5cHRvX3R5cGV9JykKICAgICAgICBrZXkgPSB3YWxsZXQubmV3X2tleSgpCiAgICAgICAgcmV0dXJuIGtleS5hZGRyZXNzLCBrZXkucHJpdmF0ZV9oZXgKCmRlZiBvbl9waW5fZW50cnkoZXZlbnQ9Tm9uZSk6CiAgICBzdG9yZWRfcGluID0gZ2V0X3BpbihrZXkpCiAgICBlbnRlcmVkX3BpbiA9IGd1aS5waW5fZW50cnkuZ2V0KCkKICAgIGlmIHN0b3JlZF9waW46CiAgICAgICAgaWYgdmVyaWZ5X3BpbihzdG9yZWRfcGluLCBlbnRlcmVkX3Bpbik6CiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LndpdGhkcmF3KCkKICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgIGVsc2U6CiAgICAgICAgY29uZmlybV9waW4gPSBndWkucGluX2NvbmZpcm1fZW50cnkuZ2V0KCkKICAgICAgICBpZiBlbnRlcmVkX3BpbiA9PSBjb25maXJtX3BpbjoKICAgICAgICAgICAgc2V0X3BpbihlbnRlcmVkX3Bpbiwga2V5KQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJTdWNjZXNzIiwgIk5ldyBQSU4gc2V0IHN1Y2Nlc3NmdWxseS4iKQogICAgICAgICAgICBndWkucGluX3dpbmRvdy53aXRoZHJhdygpCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIlBJTnMgZG8gbm90IG1hdGNoLiBUcnkgYWdhaW4uIikKCmRlZiB2aWV3X2tleXMoY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIGlmIGNyeXB0b190eXBlIGluIHdhbGxldF9pbmZvOgogICAgICAgIHB1Yl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdCiAgICAgICAgcHJpdl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0KICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKGYie2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0gS2V5cyIsIGYiUHVibGljIEtleToge3B1Yl9rZXl9XG5Qcml2YXRlIEtleToge3ByaXZfa2V5fSIpCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsIGYiTm8ga2V5cyBmb3VuZCBmb3Ige2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0uIikKCmRlZiBvbl9nZW5lcmF0ZV9hZGRyZXNzKHdhbGxldF9mcmFtZSwgY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIG5ld19hZGRyZXNzLCBwcml2YXRlX2tleSA9IGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKQogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXSA9IG5ld19hZGRyZXNzCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0gPSBwcml2YXRlX2tleQogICAgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KQoKICAgICMgUmVmcmVzaCB3YWxsZXQgd2luZG93CiAgICBndWkub3Blbl93YWxsZXRfd2luZG93KHdhbGxldF9pbmZvLCBrZXkpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAga2V5ID0gbG9hZF9rZXkoKQogICAgcGluID0gZ2V0X3BpbihrZXkpCiAgICAKICAgIHBpbl93aW5kb3cgPSB0dGsuV2luZG93KHRoZW1lbmFtZT0iZGFya2x5IikKICAgIGd1aSA9IFdhbGxldEdVSShwaW5fd2luZG93LCBvbl9nZW5lcmF0ZV9hZGRyZXNzLCB2aWV3X2tleXMsIFdhbGxldEdVSS5jb3B5X3RvX2NsaXBib2FyZCkKICAgIGd1aS5zaG93X3Bpbl93aW5kb3cob25fcGluX2VudHJ5LCBwaW4pCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAALgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					453,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAArRAAAAAAAAAAAAAArRAAAAAAAACtEAAAAAAAALcQAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHRraW50ZXIgYXMgdGsKaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmZyb20gY3J5cHRvZ3JhcGh5LmZlcm5ldCBpbXBvcnQgRmVybmV0CmZyb20gZXRoX2FjY291bnQgaW1wb3J0IEFjY291bnQKZnJvbSBiaXRjb2lubGliLndhbGxldHMgaW1wb3J0IFdhbGxldApmcm9tIGd1aSBpbXBvcnQgV2FsbGV0R1VJCgpXQUxMRVRfRklMRSA9ICJ3YWxsZXRfaW5mby5lbmMiClBJTl9GSUxFID0gInBpbi5lbmMiCgpkZWYgbG9hZF9rZXkoKToKICAgIGlmIG9zLnBhdGguZXhpc3RzKCJzZWNyZXQua2V5Iik6CiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgInJiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIHJldHVybiBrZXlfZmlsZS5yZWFkKCkKICAgIGVsc2U6CiAgICAgICAga2V5ID0gRmVybmV0LmdlbmVyYXRlX2tleSgpCiAgICAgICAgd2l0aCBvcGVuKCJzZWNyZXQua2V5IiwgIndiIikgYXMga2V5X2ZpbGU6CiAgICAgICAgICAgIGtleV9maWxlLndyaXRlKGtleSkKICAgICAgICByZXR1cm4ga2V5CgpkZWYgZW5jcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5lbmNyeXB0KGRhdGEuZW5jb2RlKCkpCgpkZWYgZGVjcnlwdChkYXRhLCBrZXkpOgogICAgZiA9IEZlcm5ldChrZXkpCiAgICByZXR1cm4gZi5kZWNyeXB0KGRhdGEpLmRlY29kZSgpCgpkZWYgZ2V0X3BpbihrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoUElOX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihQSU5fRklMRSwgInJiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9waW4gPSBwaW5fZmlsZS5yZWFkKCkKICAgICAgICBwaW4gPSBkZWNyeXB0KGVuY3J5cHRlZF9waW4sIGtleSkKICAgIGVsc2U6CiAgICAgICAgcGluID0gTm9uZQogICAgcmV0dXJuIHBpbgoKZGVmIHNldF9waW4obmV3X3Bpbiwga2V5KToKICAgIGVuY3J5cHRlZF9waW4gPSBlbmNyeXB0KG5ld19waW4sIGtleSkKICAgIHdpdGggb3BlbihQSU5fRklMRSwgIndiIikgYXMgcGluX2ZpbGU6CiAgICAgICAgcGluX2ZpbGUud3JpdGUoZW5jcnlwdGVkX3BpbikKCmRlZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgIGlmIGVudGVyZWRfcGluID09IHN0b3JlZF9waW46CiAgICAgICAgcmV0dXJuIFRydWUKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIkluY29ycmVjdCBQSU4uIikKICAgICAgICByZXR1cm4gRmFsc2UKCmRlZiBsb2FkX3dhbGxldF9pbmZvKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhXQUxMRVRfRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAicmIiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB3YWxsZXRfZmlsZS5yZWFkKCkKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkZWNyeXB0KGVuY3J5cHRlZF9kYXRhLCBrZXkpKQogICAgZWxzZToKICAgICAgICB3YWxsZXRfaW5mbyA9IHsKICAgICAgICAgICAgImJpdGNvaW4iOiB7IndhbGxldCI6ICJiaXRjb2luX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImJpdGNvaW5fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJldGhlcmV1bSI6IHsid2FsbGV0IjogImV0aGVyZXVtX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImV0aGVyZXVtX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAieHJwIjogeyJ3YWxsZXQiOiAieHJwX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInhycF9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInNoaWJhX2ludSI6IHsid2FsbGV0IjogInNoaWJhX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInNoaWJhX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB3YWxsZXRfaW5mbwoKZGVmIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSk6CiAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJ3YiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgIGVuY3J5cHRlZF9kYXRhID0gZW5jcnlwdChqc29uLmR1bXBzKHdhbGxldF9pbmZvKSwga2V5KQogICAgICAgIHdhbGxldF9maWxlLndyaXRlKGVuY3J5cHRlZF9kYXRhKQoKZGVmIGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKToKICAgIGlmIGNyeXB0b190eXBlID09ICJldGhlcmV1bSI6CiAgICAgICAgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlKCkKICAgICAgICByZXR1cm4gYWNjb3VudC5hZGRyZXNzLCBhY2NvdW50LmtleS5oZXgoKQogICAgZWxzZToKICAgICAgICB3YWxsZXQgPSBXYWxsZXQuY3JlYXRlKGYnVVNCV2FsbGV0X3tjcnlwdG9fdHlwZX0nKQogICAgICAgIGtleSA9IHdhbGxldC5uZXdfa2V5KCkKICAgICAgICByZXR1cm4ga2V5LmFkZHJlc3MsIGtleS5wcml2YXRlX2hleAoKZGVmIG9uX3Bpbl9lbnRyeShldmVudD1Ob25lKToKICAgIHN0b3JlZF9waW4gPSBnZXRfcGluKGtleSkKICAgIGVudGVyZWRfcGluID0gZ3VpLnBpbl9lbnRyeS5nZXQoKQogICAgaWYgc3RvcmVkX3BpbjoKICAgICAgICBpZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgICAgICAgICAgZ3VpLnBpbl93aW5kb3cud2l0aGRyYXcoKQogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgZWxzZToKICAgICAgICBjb25maXJtX3BpbiA9IGd1aS5waW5fY29uZmlybV9lbnRyeS5nZXQoKQogICAgICAgIGlmIGVudGVyZWRfcGluID09IGNvbmZpcm1fcGluOgogICAgICAgICAgICBzZXRfcGluKGVudGVyZWRfcGluLCBrZXkpCiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oIlN1Y2Nlc3MiLCAiTmV3IFBJTiBzZXQgc3VjY2Vzc2Z1bGx5LiIpCiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LndpdGhkcmF3KCkKICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiUElOcyBkbyBub3QgbWF0Y2guIFRyeSBhZ2Fpbi4iKQoKZGVmIHZpZXdfa2V5cyhjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgaWYgY3J5cHRvX3R5cGUgaW4gd2FsbGV0X2luZm86CiAgICAgICAgcHViX2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0KICAgICAgICBwcml2X2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXQogICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oZiJ7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfSBLZXlzIiwgZiJQdWJsaWMgS2V5OiB7cHViX2tleX1cblByaXZhdGUgS2V5OiB7cHJpdl9rZXl9IikKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgZiJObyBrZXlzIGZvdW5kIGZvciB7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfS4iKQoKZGVmIG9uX2dlbmVyYXRlX2FkZHJlc3Mod2FsbGV0X2ZyYW1lLCBjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgbmV3X2FkZHJlc3MsIHByaXZhdGVfa2V5ID0gZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdID0gbmV3X2FkZHJlc3MKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXSA9IHByaXZhdGVfa2V5CiAgICBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpCgogICAgIyBSZWZyZXNoIHdhbGxldCB3aW5kb3cKICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cod2FsbGV0X2luZm8sIGtleSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBrZXkgPSBsb2FkX2tleSgpCiAgICBwaW4gPSBnZXRfcGluKGtleSkKICAgIAogICAgcGluX3dpbmRvdyA9IHR0ay5XaW5kb3codGhlbWVuYW1lPSJkYXJrbHkiKQogICAgZ3VpID0gV2FsbGV0R1VJKHBpbl93aW5kb3csIG9uX2dlbmVyYXRlX2FkZHJlc3MsIHZpZXdfa2V5cywgV2FsbGV0R1VJLmNvcHlfdG9fY2xpcGJvYXJkKQogICAgZ3VpLnNob3dfcGluX3dpbmRvdyhvbl9waW5fZW50cnksIHBpbikK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAALcQAAAAAAAAAAAAAAAA8L8"
				],
				[
					466,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAASQ8AAAAAAAAAAAAASQ8AAAAAAABJDwAAAAAAAK0QAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBldGhfYWNjb3VudCBpbXBvcnQgQWNjb3VudApmcm9tIGJpdGNvaW5saWIud2FsbGV0cyBpbXBvcnQgV2FsbGV0CmZyb20gZ3VpIGltcG9ydCBXYWxsZXRHVUkKCldBTExFVF9GSUxFID0gIndhbGxldF9pbmZvLmVuYyIKUElOX0ZJTEUgPSAicGluLmVuYyIKCmRlZiBsb2FkX2tleSgpOgogICAgaWYgb3MucGF0aC5leGlzdHMoInNlY3JldC5rZXkiKToKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAicmIiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAgcmV0dXJuIGtleV9maWxlLnJlYWQoKQogICAgZWxzZToKICAgICAgICBrZXkgPSBGZXJuZXQuZ2VuZXJhdGVfa2V5KCkKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAid2IiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAga2V5X2ZpbGUud3JpdGUoa2V5KQogICAgICAgIHJldHVybiBrZXkKCmRlZiBlbmNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmVuY3J5cHQoZGF0YS5lbmNvZGUoKSkKCmRlZiBkZWNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmRlY3J5cHQoZGF0YSkuZGVjb2RlKCkKCmRlZiBnZXRfcGluKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhQSU5fRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAicmIiKSBhcyBwaW5fZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX3BpbiA9IHBpbl9maWxlLnJlYWQoKQogICAgICAgIHBpbiA9IGRlY3J5cHQoZW5jcnlwdGVkX3Bpbiwga2V5KQogICAgZWxzZToKICAgICAgICBwaW4gPSBOb25lCiAgICByZXR1cm4gcGluCgpkZWYgc2V0X3BpbihuZXdfcGluLCBrZXkpOgogICAgZW5jcnlwdGVkX3BpbiA9IGVuY3J5cHQobmV3X3Bpbiwga2V5KQogICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAid2IiKSBhcyBwaW5fZmlsZToKICAgICAgICBwaW5fZmlsZS53cml0ZShlbmNyeXB0ZWRfcGluKQoKZGVmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgaWYgZW50ZXJlZF9waW4gPT0gc3RvcmVkX3BpbjoKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiSW5jb3JyZWN0IFBJTi4iKQogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIGxvYWRfd2FsbGV0X2luZm8oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFdBTExFVF9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJyYiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IHdhbGxldF9maWxlLnJlYWQoKQogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGRlY3J5cHQoZW5jcnlwdGVkX2RhdGEsIGtleSkpCiAgICBlbHNlOgogICAgICAgIHdhbGxldF9pbmZvID0gewogICAgICAgICAgICAiYml0Y29pbiI6IHsid2FsbGV0IjogImJpdGNvaW5fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiYml0Y29pbl9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgImV0aGVyZXVtIjogeyJ3YWxsZXQiOiAiZXRoZXJldW1fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiZXRoZXJldW1fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJ4cnAiOiB7IndhbGxldCI6ICJ4cnBfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAieHJwX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAic2hpYmFfaW51IjogeyJ3YWxsZXQiOiAic2hpYmFfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAic2hpYmFfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHdhbGxldF9pbmZvCgpkZWYgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KToKICAgIHdpdGggb3BlbihXQUxMRVRfRklMRSwgIndiIikgYXMgd2FsbGV0X2ZpbGU6CiAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSBlbmNyeXB0KGpzb24uZHVtcHMod2FsbGV0X2luZm8pLCBrZXkpCiAgICAgICAgd2FsbGV0X2ZpbGUud3JpdGUoZW5jcnlwdGVkX2RhdGEpCgpkZWYgZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpOgogICAgaWYgY3J5cHRvX3R5cGUgPT0gImV0aGVyZXVtIjoKICAgICAgICBhY2NvdW50ID0gQWNjb3VudC5jcmVhdGUoKQogICAgICAgIHJldHVybiBhY2NvdW50LmFkZHJlc3MsIGFjY291bnQua2V5LmhleCgpCiAgICBlbHNlOgogICAgICAgIHdhbGxldCA9IFdhbGxldC5jcmVhdGUoZidVU0JXYWxsZXRfe2NyeXB0b190eXBlfScpCiAgICAgICAga2V5ID0gd2FsbGV0Lm5ld19rZXkoKQogICAgICAgIHJldHVybiBrZXkuYWRkcmVzcywga2V5LnByaXZhdGVfaGV4CgpkZWYgb25fcGluX2VudHJ5KGV2ZW50PU5vbmUpOgogICAgc3RvcmVkX3BpbiA9IGdldF9waW4oa2V5KQogICAgZW50ZXJlZF9waW4gPSBndWkucGluX2VudHJ5LmdldCgpCiAgICBpZiBzdG9yZWRfcGluOgogICAgICAgIGlmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc3VjY2Vzc2Z1bCB2ZXJpZmljYXRpb24KICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgIGVsc2U6CiAgICAgICAgY29uZmlybV9waW4gPSBndWkucGluX2NvbmZpcm1fZW50cnkuZ2V0KCkKICAgICAgICBpZiBlbnRlcmVkX3BpbiA9PSBjb25maXJtX3BpbjoKICAgICAgICAgICAgc2V0X3BpbihlbnRlcmVkX3Bpbiwga2V5KQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJTdWNjZXNzIiwgIk5ldyBQSU4gc2V0IHN1Y2Nlc3NmdWxseS4iKQogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc2V0dGluZyB0aGUgbmV3IFBJTgogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJQSU5zIGRvIG5vdCBtYXRjaC4gVHJ5IGFnYWluLiIpCgpkZWYgdmlld19rZXlzKGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBpZiBjcnlwdG9fdHlwZSBpbiB3YWxsZXRfaW5mbzoKICAgICAgICBwdWJfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXQogICAgICAgIHByaXZfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdCiAgICAgICAgbWVzc2FnZWJveC5zaG93aW5mbyhmIntjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9IEtleXMiLCBmIlB1YmxpYyBLZXk6IHtwdWJfa2V5fVxuUHJpdmF0ZSBLZXk6IHtwcml2X2tleX0iKQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCBmIk5vIGtleXMgZm91bmQgZm9yIHtjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9LiIpCgpkZWYgb25fZ2VuZXJhdGVfYWRkcmVzcyh3YWxsZXRfZnJhbWUsIGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBuZXdfYWRkcmVzcywgcHJpdmF0ZV9rZXkgPSBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSkKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0gPSBuZXdfYWRkcmVzcwogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdID0gcHJpdmF0ZV9rZXkKICAgIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSkKCiAgICAjIFJlZnJlc2ggd2FsbGV0IHdpbmRvdwogICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyh3YWxsZXRfaW5mbywga2V5KQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGtleSA9IGxvYWRfa2V5KCkKICAgIHBpbiA9IGdldF9waW4oa2V5KQogICAgCiAgICBndWkgPSBXYWxsZXRHVUkob25fZ2VuZXJhdGVfYWRkcmVzcywgdmlld19rZXlzLCBXYWxsZXRHVUkuY29weV90b19jbGlwYm9hcmQpCiAgICBndWkuc2hvd19waW5fd2luZG93KG9uX3Bpbl9lbnRyeSwgcGluKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					473,
					1,
					"paste",
					null,
					"AgAAAGgOAAAAAAAArhAAAAAAAAAAAAAArhAAAAAAAACuEAAAAAAAAOEAAABkZWYgb25fZ2VuZXJhdGVfYWRkcmVzcyh3YWxsZXRfZnJhbWUsIGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBuZXdfYWRkcmVzcywgcHJpdmF0ZV9rZXkgPSBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSkKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0gPSBuZXdfYWRkcmVzcwogICAgd2FsbGV0X2luZm8",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoDgAAAAAAAEkPAAAAAAAAAAAAAAAA8L8"
				],
				[
					480,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAArRAAAAAAAAAAAAAArRAAAAAAAACtEAAAAAAAAK4QAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBldGhfYWNjb3VudCBpbXBvcnQgQWNjb3VudApmcm9tIGJpdGNvaW5saWIud2FsbGV0cyBpbXBvcnQgV2FsbGV0CmZyb20gZ3VpIGltcG9ydCBXYWxsZXRHVUkKCldBTExFVF9GSUxFID0gIndhbGxldF9pbmZvLmVuYyIKUElOX0ZJTEUgPSAicGluLmVuYyIKCmRlZiBsb2FkX2tleSgpOgogICAgaWYgb3MucGF0aC5leGlzdHMoInNlY3JldC5rZXkiKToKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAicmIiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAgcmV0dXJuIGtleV9maWxlLnJlYWQoKQogICAgZWxzZToKICAgICAgICBrZXkgPSBGZXJuZXQuZ2VuZXJhdGVfa2V5KCkKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAid2IiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAga2V5X2ZpbGUud3JpdGUoa2V5KQogICAgICAgIHJldHVybiBrZXkKCmRlZiBlbmNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmVuY3J5cHQoZGF0YS5lbmNvZGUoKSkKCmRlZiBkZWNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmRlY3J5cHQoZGF0YSkuZGVjb2RlKCkKCmRlZiBnZXRfcGluKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhQSU5fRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAicmIiKSBhcyBwaW5fZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX3BpbiA9IHBpbl9maWxlLnJlYWQoKQogICAgICAgIHBpbiA9IGRlY3J5cHQoZW5jcnlwdGVkX3Bpbiwga2V5KQogICAgZWxzZToKICAgICAgICBwaW4gPSBOb25lCiAgICByZXR1cm4gcGluCgpkZWYgc2V0X3BpbihuZXdfcGluLCBrZXkpOgogICAgZW5jcnlwdGVkX3BpbiA9IGVuY3J5cHQobmV3X3Bpbiwga2V5KQogICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAid2IiKSBhcyBwaW5fZmlsZToKICAgICAgICBwaW5fZmlsZS53cml0ZShlbmNyeXB0ZWRfcGluKQoKZGVmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgaWYgZW50ZXJlZF9waW4gPT0gc3RvcmVkX3BpbjoKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiSW5jb3JyZWN0IFBJTi4iKQogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIGxvYWRfd2FsbGV0X2luZm8oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFdBTExFVF9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJyYiIpIGFzIHdhbGxldF9maWxlKToKICAgICAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSB3YWxsZXRfZmlsZS5yZWFkKCkKICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkZWNyeXB0KGVuY3J5cHRlZF9kYXRhLCBrZXkpKQogICAgZWxzZToKICAgICAgICB3YWxsZXRfaW5mbyA9IHsKICAgICAgICAgICAgImJpdGNvaW4iOiB7IndhbGxldCI6ICJiaXRjb2luX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImJpdGNvaW5fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJldGhlcmV1bSI6IHsid2FsbGV0IjogImV0aGVyZXVtX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogImV0aGVyZXVtX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAieHJwIjogeyJ3YWxsZXQiOiAieHJwX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInhycF9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInNoaWJhX2ludSI6IHsid2FsbGV0IjogInNoaWJhX3dhbGxldF9hZGRyZXNzIiwgInByaXZhdGVfa2V5IjogInNoaWJhX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB3YWxsZXRfaW5mbwoKZGVmIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSk6CiAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJ3YiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgIGVuY3J5cHRlZF9kYXRhID0gZW5jcnlwdChqc29uLmR1bXBzKHdhbGxldF9pbmZvKSwga2V5KQogICAgICAgIHdhbGxldF9maWxlLndyaXRlKGVuY3J5cHRlZF9kYXRhKQoKZGVmIGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKToKICAgIGlmIGNyeXB0b190eXBlID09ICJldGhlcmV1bSI6CiAgICAgICAgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlKCkKICAgICAgICByZXR1cm4gYWNjb3VudC5hZGRyZXNzLCBhY2NvdW50LmtleS5oZXgoKQogICAgZWxzZToKICAgICAgICB3YWxsZXQgPSBXYWxsZXQuY3JlYXRlKGYnVVNCV2FsbGV0X3tjcnlwdG9fdHlwZX0nKQogICAgICAgIGtleSA9IHdhbGxldC5uZXdfa2V5KCkKICAgICAgICByZXR1cm4ga2V5LmFkZHJlc3MsIGtleS5wcml2YXRlX2hleAoKZGVmIG9uX3Bpbl9lbnRyeShldmVudD1Ob25lKToKICAgIHN0b3JlZF9waW4gPSBnZXRfcGluKGtleSkKICAgIGVudGVyZWRfcGluID0gZ3VpLnBpbl9lbnRyeS5nZXQoKQogICAgaWYgc3RvcmVkX3BpbjoKICAgICAgICBpZiB2ZXJpZnlfcGluKHN0b3JlZF9waW4sIGVudGVyZWRfcGluKToKICAgICAgICAgICAgZ3VpLnBpbl93aW5kb3cuZGVzdHJveSgpICAjIENsb3NlIHRoZSBQSU4gd2luZG93IGFmdGVyIHN1Y2Nlc3NmdWwgdmVyaWZpY2F0aW9uCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICBlbHNlOgogICAgICAgIGNvbmZpcm1fcGluID0gZ3VpLnBpbl9jb25maXJtX2VudHJ5LmdldCgpCiAgICAgICAgaWYgZW50ZXJlZF9waW4gPT0gY29uZmlybV9waW46CiAgICAgICAgICAgIHNldF9waW4oZW50ZXJlZF9waW4sIGtleSkKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93aW5mbygiU3VjY2VzcyIsICJOZXcgUElOIHNldCBzdWNjZXNzZnVsbHkuIikKICAgICAgICAgICAgZ3VpLnBpbl93aW5kb3cuZGVzdHJveSgpICAjIENsb3NlIHRoZSBQSU4gd2luZG93IGFmdGVyIHNldHRpbmcgdGhlIG5ldyBQSU4KICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiUElOcyBkbyBub3QgbWF0Y2guIFRyeSBhZ2Fpbi4iKQoKZGVmIHZpZXdfa2V5cyhjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgaWYgY3J5cHRvX3R5cGUgaW4gd2FsbGV0X2luZm86CiAgICAgICAgcHViX2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0KICAgICAgICBwcml2X2tleSA9IHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXQogICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oZiJ7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfSBLZXlzIiwgZiJQdWJsaWMgS2V5OiB7cHViX2tleX1cblByaXZhdGUgS2V5OiB7cHJpdl9rZXl9IikKICAgIGVsc2U6CiAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgZiJObyBrZXlzIGZvdW5kIGZvciB7Y3J5cHRvX3R5cGUuY2FwaXRhbGl6ZSgpfS4iKQoKZGVmIG9uX2dlbmVyYXRlX2FkZHJlc3Mod2FsbGV0X2ZyYW1lLCBjcnlwdG9fdHlwZSk6CiAgICB3YWxsZXRfaW5mbyA9IGxvYWRfd2FsbGV0X2luZm8oa2V5KQogICAgbmV3X2FkZHJlc3MsIHByaXZhdGVfa2V5ID0gZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdID0gbmV3X2FkZHJlc3MKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsicHJpdmF0ZV9rZXkiXSA9IHByaXZhdGVfa2V5CiAgICBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpCgogICAgIyBSZWZyZXNoIHdhbGxldCB3aW5kb3cKICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cod2FsbGV0X2luZm8sIGtleSkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBrZXkgPSBsb2FkX2tleSgpCiAgICBwaW4gPSBnZXRfcGluKGtleSkKICAgIAogICAgZ3VpID0gV2FsbGV0R1VJKG9uX2dlbmVyYXRlX2FkZHJlc3MsIHZpZXdfa2V5cywgV2FsbGV0R1VJLmNvcHlfdG9fY2xpcGJvYXJkKQogICAgZ3VpLnNob3dfcGluX3dpbmRvdyhvbl9waW5fZW50cnksIHBpbikK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAK4QAAAAAAAAAAAAAAAA8L8"
				],
				[
					487,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAArRAAAAAAAAAAAAAArRAAAAAAAACtEAAAAAAAAK0QAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBldGhfYWNjb3VudCBpbXBvcnQgQWNjb3VudApmcm9tIGJpdGNvaW5saWIud2FsbGV0cyBpbXBvcnQgV2FsbGV0CmZyb20gZ3VpIGltcG9ydCBXYWxsZXRHVUkKCldBTExFVF9GSUxFID0gIndhbGxldF9pbmZvLmVuYyIKUElOX0ZJTEUgPSAicGluLmVuYyIKCmRlZiBsb2FkX2tleSgpOgogICAgaWYgb3MucGF0aC5leGlzdHMoInNlY3JldC5rZXkiKToKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAicmIiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAgcmV0dXJuIGtleV9maWxlLnJlYWQoKQogICAgZWxzZToKICAgICAgICBrZXkgPSBGZXJuZXQuZ2VuZXJhdGVfa2V5KCkKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAid2IiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAga2V5X2ZpbGUud3JpdGUoa2V5KQogICAgICAgIHJldHVybiBrZXkKCmRlZiBlbmNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmVuY3J5cHQoZGF0YS5lbmNvZGUoKSkKCmRlZiBkZWNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmRlY3J5cHQoZGF0YSkuZGVjb2RlKCkKCmRlZiBnZXRfcGluKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhQSU5fRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAicmIiKSBhcyBwaW5fZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX3BpbiA9IHBpbl9maWxlLnJlYWQoKQogICAgICAgIHBpbiA9IGRlY3J5cHQoZW5jcnlwdGVkX3Bpbiwga2V5KQogICAgZWxzZToKICAgICAgICBwaW4gPSBOb25lCiAgICByZXR1cm4gcGluCgpkZWYgc2V0X3BpbihuZXdfcGluLCBrZXkpOgogICAgZW5jcnlwdGVkX3BpbiA9IGVuY3J5cHQobmV3X3Bpbiwga2V5KQogICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAid2IiKSBhcyBwaW5fZmlsZToKICAgICAgICBwaW5fZmlsZS53cml0ZShlbmNyeXB0ZWRfcGluKQoKZGVmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgaWYgZW50ZXJlZF9waW4gPT0gc3RvcmVkX3BpbjoKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiSW5jb3JyZWN0IFBJTi4iKQogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIGxvYWRfd2FsbGV0X2luZm8oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFdBTExFVF9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJyYiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IHdhbGxldF9maWxlLnJlYWQoKQogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGRlY3J5cHQoZW5jcnlwdGVkX2RhdGEsIGtleSkpCiAgICBlbHNlOgogICAgICAgIHdhbGxldF9pbmZvID0gewogICAgICAgICAgICAiYml0Y29pbiI6IHsid2FsbGV0IjogImJpdGNvaW5fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiYml0Y29pbl9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgImV0aGVyZXVtIjogeyJ3YWxsZXQiOiAiZXRoZXJldW1fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiZXRoZXJldW1fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJ4cnAiOiB7IndhbGxldCI6ICJ4cnBfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAieHJwX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAic2hpYmFfaW51IjogeyJ3YWxsZXQiOiAic2hpYmFfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAic2hpYmFfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHdhbGxldF9pbmZvCgpkZWYgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KToKICAgIHdpdGggb3BlbihXQUxMRVRfRklMRSwgIndiIikgYXMgd2FsbGV0X2ZpbGU6CiAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSBlbmNyeXB0KGpzb24uZHVtcHMod2FsbGV0X2luZm8pLCBrZXkpCiAgICAgICAgd2FsbGV0X2ZpbGUud3JpdGUoZW5jcnlwdGVkX2RhdGEpCgpkZWYgZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpOgogICAgaWYgY3J5cHRvX3R5cGUgPT0gImV0aGVyZXVtIjoKICAgICAgICBhY2NvdW50ID0gQWNjb3VudC5jcmVhdGUoKQogICAgICAgIHJldHVybiBhY2NvdW50LmFkZHJlc3MsIGFjY291bnQua2V5LmhleCgpCiAgICBlbHNlOgogICAgICAgIHdhbGxldCA9IFdhbGxldC5jcmVhdGUoZidVU0JXYWxsZXRfe2NyeXB0b190eXBlfScpCiAgICAgICAga2V5ID0gd2FsbGV0Lm5ld19rZXkoKQogICAgICAgIHJldHVybiBrZXkuYWRkcmVzcywga2V5LnByaXZhdGVfaGV4CgpkZWYgb25fcGluX2VudHJ5KGV2ZW50PU5vbmUpOgogICAgc3RvcmVkX3BpbiA9IGdldF9waW4oa2V5KQogICAgZW50ZXJlZF9waW4gPSBndWkucGluX2VudHJ5LmdldCgpCiAgICBpZiBzdG9yZWRfcGluOgogICAgICAgIGlmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc3VjY2Vzc2Z1bCB2ZXJpZmljYXRpb24KICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgIGVsc2U6CiAgICAgICAgY29uZmlybV9waW4gPSBndWkucGluX2NvbmZpcm1fZW50cnkuZ2V0KCkKICAgICAgICBpZiBlbnRlcmVkX3BpbiA9PSBjb25maXJtX3BpbjoKICAgICAgICAgICAgc2V0X3BpbihlbnRlcmVkX3Bpbiwga2V5KQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJTdWNjZXNzIiwgIk5ldyBQSU4gc2V0IHN1Y2Nlc3NmdWxseS4iKQogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc2V0dGluZyB0aGUgbmV3IFBJTgogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJQSU5zIGRvIG5vdCBtYXRjaC4gVHJ5IGFnYWluLiIpCgpkZWYgdmlld19rZXlzKGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBpZiBjcnlwdG9fdHlwZSBpbiB3YWxsZXRfaW5mbzoKICAgICAgICBwdWJfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXQogICAgICAgIHByaXZfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdCiAgICAgICAgbWVzc2FnZWJveC5zaG93aW5mbyhmIntjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9IEtleXMiLCBmIlB1YmxpYyBLZXk6IHtwdWJfa2V5fVxuUHJpdmF0ZSBLZXk6IHtwcml2X2tleX0iKQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCBmIk5vIGtleXMgZm91bmQgZm9yIHtjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9LiIpCgpkZWYgb25fZ2VuZXJhdGVfYWRkcmVzcyh3YWxsZXRfZnJhbWUsIGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBuZXdfYWRkcmVzcywgcHJpdmF0ZV9rZXkgPSBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSkKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0gPSBuZXdfYWRkcmVzcwogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdID0gcHJpdmF0ZV9rZXkKICAgIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSkKCiAgICAjIFJlZnJlc2ggd2FsbGV0IHdpbmRvdwogICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyh3YWxsZXRfaW5mbywga2V5KQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGtleSA9IGxvYWRfa2V5KCkKICAgIHBpbiA9IGdldF9waW4oa2V5KQogICAgCiAgICBndWkgPSBXYWxsZXRHVUkob25fZ2VuZXJhdGVfYWRkcmVzcywgdmlld19rZXlzLCBXYWxsZXRHVUkuY29weV90b19jbGlwYm9hcmQpCiAgICBndWkuc2hvd19waW5fd2luZG93KG9uX3Bpbl9lbnRyeSwgcGluKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					502,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAbxEAAAAAAAAAAAAAbxEAAAAAAABvEQAAAAAAAK0QAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KaW1wb3J0IHR0a2Jvb3RzdHJhcCBhcyB0dGsKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBldGhfYWNjb3VudCBpbXBvcnQgQWNjb3VudApmcm9tIGJpdGNvaW5saWIud2FsbGV0cyBpbXBvcnQgV2FsbGV0CmZyb20gZ3VpIGltcG9ydCBXYWxsZXRHVUkKCldBTExFVF9GSUxFID0gIndhbGxldF9pbmZvLmVuYyIKUElOX0ZJTEUgPSAicGluLmVuYyIKCmRlZiBsb2FkX2tleSgpOgogICAgaWYgb3MucGF0aC5leGlzdHMoInNlY3JldC5rZXkiKToKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAicmIiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAgcmV0dXJuIGtleV9maWxlLnJlYWQoKQogICAgZWxzZToKICAgICAgICBrZXkgPSBGZXJuZXQuZ2VuZXJhdGVfa2V5KCkKICAgICAgICB3aXRoIG9wZW4oInNlY3JldC5rZXkiLCAid2IiKSBhcyBrZXlfZmlsZToKICAgICAgICAgICAga2V5X2ZpbGUud3JpdGUoa2V5KQogICAgICAgIHJldHVybiBrZXkKCmRlZiBlbmNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmVuY3J5cHQoZGF0YS5lbmNvZGUoKSkKCmRlZiBkZWNyeXB0KGRhdGEsIGtleSk6CiAgICBmID0gRmVybmV0KGtleSkKICAgIHJldHVybiBmLmRlY3J5cHQoZGF0YSkuZGVjb2RlKCkKCmRlZiBnZXRfcGluKGtleSk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cyhQSU5fRklMRSk6CiAgICAgICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAicmIiKSBhcyBwaW5fZmlsZToKICAgICAgICAgICAgZW5jcnlwdGVkX3BpbiA9IHBpbl9maWxlLnJlYWQoKQogICAgICAgIHBpbiA9IGRlY3J5cHQoZW5jcnlwdGVkX3Bpbiwga2V5KQogICAgZWxzZToKICAgICAgICBwaW4gPSBOb25lCiAgICByZXR1cm4gcGluCgpkZWYgc2V0X3BpbihuZXdfcGluLCBrZXkpOgogICAgZW5jcnlwdGVkX3BpbiA9IGVuY3J5cHQobmV3X3Bpbiwga2V5KQogICAgd2l0aCBvcGVuKFBJTl9GSUxFLCAid2IiKSBhcyBwaW5fZmlsZToKICAgICAgICBwaW5fZmlsZS53cml0ZShlbmNyeXB0ZWRfcGluKQoKZGVmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgaWYgZW50ZXJlZF9waW4gPT0gc3RvcmVkX3BpbjoKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCAiSW5jb3JyZWN0IFBJTi4iKQogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIGxvYWRfd2FsbGV0X2luZm8oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFdBTExFVF9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oV0FMTEVUX0ZJTEUsICJyYiIpIGFzIHdhbGxldF9maWxlOgogICAgICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IHdhbGxldF9maWxlLnJlYWQoKQogICAgICAgIHJldHVybiBqc29uLmxvYWRzKGRlY3J5cHQoZW5jcnlwdGVkX2RhdGEsIGtleSkpCiAgICBlbHNlOgogICAgICAgIHdhbGxldF9pbmZvID0gewogICAgICAgICAgICAiYml0Y29pbiI6IHsid2FsbGV0IjogImJpdGNvaW5fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiYml0Y29pbl9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgImV0aGVyZXVtIjogeyJ3YWxsZXQiOiAiZXRoZXJldW1fd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAiZXRoZXJldW1fcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJ4cnAiOiB7IndhbGxldCI6ICJ4cnBfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAieHJwX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAic2hpYmFfaW51IjogeyJ3YWxsZXQiOiAic2hpYmFfd2FsbGV0X2FkZHJlc3MiLCAicHJpdmF0ZV9rZXkiOiAic2hpYmFfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHdhbGxldF9pbmZvCgpkZWYgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KToKICAgIHdpdGggb3BlbihXQUxMRVRfRklMRSwgIndiIikgYXMgd2FsbGV0X2ZpbGU6CiAgICAgICAgZW5jcnlwdGVkX2RhdGEgPSBlbmNyeXB0KGpzb24uZHVtcHMod2FsbGV0X2luZm8pLCBrZXkpCiAgICAgICAgd2FsbGV0X2ZpbGUud3JpdGUoZW5jcnlwdGVkX2RhdGEpCgpkZWYgZ2VuZXJhdGVfbmV3X2FkZHJlc3MoY3J5cHRvX3R5cGUpOgogICAgaWYgY3J5cHRvX3R5cGUgPT0gImV0aGVyZXVtIjoKICAgICAgICBhY2NvdW50ID0gQWNjb3VudC5jcmVhdGUoKQogICAgICAgIHJldHVybiBhY2NvdW50LmFkZHJlc3MsIGFjY291bnQua2V5LmhleCgpCiAgICBlbHNlOgogICAgICAgIHdhbGxldCA9IFdhbGxldC5jcmVhdGUoZidVU0JXYWxsZXRfe2NyeXB0b190eXBlfScpCiAgICAgICAga2V5ID0gd2FsbGV0Lm5ld19rZXkoKQogICAgICAgIHJldHVybiBrZXkuYWRkcmVzcywga2V5LnByaXZhdGVfaGV4CgpkZWYgb25fcGluX2VudHJ5KGV2ZW50PU5vbmUpOgogICAgc3RvcmVkX3BpbiA9IGdldF9waW4oa2V5KQogICAgZW50ZXJlZF9waW4gPSBndWkucGluX2VudHJ5LmdldCgpCiAgICBpZiBzdG9yZWRfcGluOgogICAgICAgIGlmIHZlcmlmeV9waW4oc3RvcmVkX3BpbiwgZW50ZXJlZF9waW4pOgogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc3VjY2Vzc2Z1bCB2ZXJpZmljYXRpb24KICAgICAgICAgICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyhsb2FkX3dhbGxldF9pbmZvKGtleSksIGtleSkKICAgIGVsc2U6CiAgICAgICAgY29uZmlybV9waW4gPSBndWkucGluX2NvbmZpcm1fZW50cnkuZ2V0KCkKICAgICAgICBpZiBlbnRlcmVkX3BpbiA9PSBjb25maXJtX3BpbjoKICAgICAgICAgICAgc2V0X3BpbihlbnRlcmVkX3Bpbiwga2V5KQogICAgICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKCJTdWNjZXNzIiwgIk5ldyBQSU4gc2V0IHN1Y2Nlc3NmdWxseS4iKQogICAgICAgICAgICBndWkucGluX3dpbmRvdy5kZXN0cm95KCkgICMgQ2xvc2UgdGhlIFBJTiB3aW5kb3cgYWZ0ZXIgc2V0dGluZyB0aGUgbmV3IFBJTgogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJQSU5zIGRvIG5vdCBtYXRjaC4gVHJ5IGFnYWluLiIpCgpkZWYgdmlld19rZXlzKGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBpZiBjcnlwdG9fdHlwZSBpbiB3YWxsZXRfaW5mbzoKICAgICAgICBwdWJfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXQogICAgICAgIHByaXZfa2V5ID0gd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdCiAgICAgICAgbWVzc2FnZWJveC5zaG93aW5mbyhmIntjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9IEtleXMiLCBmIlB1YmxpYyBLZXk6IHtwdWJfa2V5fVxuUHJpdmF0ZSBLZXk6IHtwcml2X2tleX0iKQogICAgZWxzZToKICAgICAgICBtZXNzYWdlYm94LnNob3dlcnJvcigiRXJyb3IiLCBmIk5vIGtleXMgZm91bmQgZm9yIHtjcnlwdG9fdHlwZS5jYXBpdGFsaXplKCl9LiIpCgpkZWYgb25fZ2VuZXJhdGVfYWRkcmVzcyh3YWxsZXRfZnJhbWUsIGNyeXB0b190eXBlKToKICAgIHdhbGxldF9pbmZvID0gbG9hZF93YWxsZXRfaW5mbyhrZXkpCiAgICBuZXdfYWRkcmVzcywgcHJpdmF0ZV9rZXkgPSBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSkKICAgIHdhbGxldF9pbmZvW2NyeXB0b190eXBlXVsid2FsbGV0Il0gPSBuZXdfYWRkcmVzcwogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJwcml2YXRlX2tleSJdID0gcHJpdmF0ZV9rZXkKICAgIHNhdmVfd2FsbGV0X2luZm8od2FsbGV0X2luZm8sIGtleSkKCiAgICAjIFJlZnJlc2ggd2FsbGV0IHdpbmRvdwogICAgZ3VpLm9wZW5fd2FsbGV0X3dpbmRvdyh3YWxsZXRfaW5mbywga2V5KQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIGtleSA9IGxvYWRfa2V5KCkKICAgIHBpbiA9IGdldF9waW4oa2V5KQogICAgCiAgICBndWkgPSBXYWxsZXRHVUkob25fZ2VuZXJhdGVfYWRkcmVzcywgdmlld19rZXlzLCBXYWxsZXRHVUkuY29weV90b19jbGlwYm9hcmQpCiAgICBndWkuc2hvd19waW5fd2luZG93KG9uX3Bpbl9lbnRyeSwgcGluKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAK0QAAAAAAAAAAAAAAAA8L8"
				],
				[
					518,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAygwAAAAAAAAAAAAAygwAAAAAAADKDAAAAAAAAG8RAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KZnJvbSB0a2ludGVyIGltcG9ydCBUaywgbWVzc2FnZWJveApmcm9tIGNyeXB0b2dyYXBoeS5mZXJuZXQgaW1wb3J0IEZlcm5ldApmcm9tIGV0aF9hY2NvdW50IGltcG9ydCBBY2NvdW50CmZyb20gYml0Y29pbmxpYi53YWxsZXRzIGltcG9ydCBXYWxsZXQKZnJvbSBndWkgaW1wb3J0IFdhbGxldEdVSQoKV0FMTEVUX0ZJTEUgPSAid2FsbGV0X2luZm8uZW5jIgpQSU5fRklMRSA9ICJwaW4uZW5jIgoKZGVmIGxvYWRfa2V5KCk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cygic2VjcmV0LmtleSIpOgogICAgICAgIHdpdGggb3Blbigic2VjcmV0LmtleSIsICJyYiIpIGFzIGtleV9maWxlOgogICAgICAgICAgICByZXR1cm4ga2V5X2ZpbGUucmVhZCgpCiAgICBlbHNlOgogICAgICAgIGtleSA9IEZlcm5ldC5nZW5lcmF0ZV9rZXkoKQogICAgICAgIHdpdGggb3Blbigic2VjcmV0LmtleSIsICJ3YiIpIGFzIGtleV9maWxlOgogICAgICAgICAgICBrZXlfZmlsZS53cml0ZShrZXkpCiAgICAgICAgcmV0dXJuIGtleQoKZGVmIGVuY3J5cHQoZGF0YSwga2V5KToKICAgIGYgPSBGZXJuZXQoa2V5KQogICAgcmV0dXJuIGYuZW5jcnlwdChkYXRhLmVuY29kZSgpKQoKZGVmIGRlY3J5cHQoZGF0YSwga2V5KToKICAgIGYgPSBGZXJuZXQoa2V5KQogICAgcmV0dXJuIGYuZGVjcnlwdChkYXRhKS5kZWNvZGUoKQoKZGVmIGdldF9waW4oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFBJTl9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oUElOX0ZJTEUsICJyYiIpIGFzIHBpbl9maWxlOgogICAgICAgICAgICBlbmNyeXB0ZWRfcGluID0gcGluX2ZpbGUucmVhZCgpCiAgICAgICAgcGluID0gZGVjcnlwdChlbmNyeXB0ZWRfcGluLCBrZXkpCiAgICBlbHNlOgogICAgICAgIHBpbiA9IE5vbmUKICAgIHJldHVybiBwaW4KCmRlZiBzZXRfcGluKG5ld19waW4sIGtleSk6CiAgICBlbmNyeXB0ZWRfcGluID0gZW5jcnlwdChuZXdfcGluLCBrZXkpCiAgICB3aXRoIG9wZW4oUElOX0ZJTEUsICJ3YiIpIGFzIHBpbl9maWxlOgogICAgICAgIHBpbl9maWxlLndyaXRlKGVuY3J5cHRlZF9waW4pCgpkZWYgdmVyaWZ5X3BpbihzdG9yZWRfcGluLCBlbnRlcmVkX3Bpbik6CiAgICBpZiBlbnRlcmVkX3BpbiA9PSBzdG9yZWRfcGluOgogICAgICAgIHJldHVybiBUcnVlCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJJbmNvcnJlY3QgUElOLiIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgpkZWYgbG9hZF93YWxsZXRfaW5mbyhrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoV0FMTEVUX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihXQUxMRVRfRklMRSwgInJiIikgYXMgd2FsbGV0X2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9kYXRhID0gd2FsbGV0X2ZpbGUucmVhZCgpCiAgICAgICAgcmV0dXJuIGpzb24ubG9hZHMoZGVjcnlwdChlbmNyeXB0ZWRfZGF0YSwga2V5KSkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0X2luZm8gPSB7CiAgICAgICAgICAgICJiaXRjb2luIjogeyJ3YWxsZXQiOiAiYml0Y29pbl93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJiaXRjb2luX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAiZXRoZXJldW0iOiB7IndhbGxldCI6ICJldGhlcmV1bV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJldGhlcmV1bV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInhycCI6IHsid2FsbGV0IjogInhycF93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJ4cnBfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJzaGliYV9pbnUiOiB7IndhbGxldCI6ICJzaGliYV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJzaGliYV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfQogICAgICAgIH0KICAgICAgICByZXR1cm4gd2FsbGV0X2luZm8KCmRlZiBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpOgogICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAid2IiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IGVuY3J5cHQoanNvbi5kdW1wcyh3YWxsZXRfaW5mbyksIGtleSkKICAgICAgICB3YWxsZXRfZmlsZS53cml0ZShlbmNyeXB0ZWRfZGF0YSkKCmRlZiBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSk6CiAgICBpZiBjcnlwdG9fdHlwZSA9PSAiZXRoZXJldW0iOgogICAgICAgIGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZSgpCiAgICAgICAgcmV0dXJuIGFjY291bnQuYWRkcmVzcywgYWNjb3VudC5rZXkuaGV4KCkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0ID0gV2FsbGV0LmNyZWF0ZShmJ1VTQldhbGxldF97Y3J5cHRvX3R5cGV9JykKICAgICAgICBrZXkgPSB3YWxsZXQubmV3X2tleSgpCiAgICAgICAgcmV0dXJuIGtleS5hZGRyZXNzLCBrZXkucHJpdmF0ZV9oZXgKCmRlZiBvbl9waW5fZW50cnkoZXZlbnQ9Tm9uZSk6CiAgICBzdG9yZWRfcGluID0gZ2V0X3BpbihrZXkpCiAgICBlbnRlcmVkX3BpbiA9IGd1aS5waW5fZW50cnkuZ2V0KCkKICAgIGlmIHN0b3JlZF9waW46CiAgICAgICAgaWYgdmVyaWZ5X3BpbihzdG9yZWRfcGluLCBlbnRlcmVkX3Bpbik6CiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LmRlc3Ryb3koKSAgIyBDbG9zZSB0aGUgUElOIHdpbmRvdyBhZnRlciBzdWNjZXNzZnVsIHZlcmlmaWNhdGlvbgogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgZWxzZToKICAgICAgICBjb25maXJtX3BpbiA9IGd1aS5waW5fY29uZmlybV9lbnRyeS5nZXQoKQogICAgICAgIGlmIGVudGVyZWRfcGluID09IGNvbmZpcm1fcGluOgogICAgICAgICAgICBzZXRfcGluKGVudGVyZWRfcGluLCBrZXkpCiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oIlN1Y2Nlc3MiLCAiTmV3IFBJTiBzZXQgc3VjY2Vzc2Z1bGx5LiIpCiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LmRlc3Ryb3koKSAgIyBDbG9zZSB0aGUgUElOIHdpbmRvdyBhZnRlciBzZXR0aW5nIHRoZSBuZXcgUElOCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIlBJTnMgZG8gbm90IG1hdGNoLiBUcnkgYWdhaW4uIikKCmRlZiB2aWV3X2tleXMoY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIGlmIGNyeXB0b190eXBlIGluIHdhbGxldF9pbmZvOgogICAgICAgIHB1Yl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdCiAgICAgICAgcHJpdl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0KICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKGYie2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0gS2V5cyIsIGYiUHVibGljIEtleToge3B1Yl9rZXl9XG5Qcml2YXRlIEtleToge3ByaXZfa2V5fSIpCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsIGYiTm8ga2V5cyBmb3VuZCBmb3Ige2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0uIikKCmRlZiBvbl9nZW5lcmF0ZV9hZGRyZXNzKHdhbGxldF9mcmFtZSwgY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIG5ld19hZGRyZXNzLCBwcml2YXRlX2tleSA9IGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKQogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXSA9IG5ld19hZGRyZXNzCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0gPSBwcml2YXRlX2tleQogICAgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KQoKICAgICMgUmVmcmVzaCB3YWxsZXQgd2luZG93CiAgICBndWkub3Blbl93YWxsZXRfd2luZG93KHdhbGxldF9pbmZvLCBrZXkpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAga2V5ID0gbG9hZF9rZXkoKQogICAgcGluID0gZ2V0X3BpbihrZXkpCgogICAgcm9vdCA9IFRrKCkgICMgQ3JlYXRlIHRoZSBtYWluIFRraW50ZXIgcm9vdCB3aW5kb3cKICAgIHJvb3Qud2l0aGRyYXcoKSAgIyBIaWRlIHRoZSBtYWluIHdpbmRvdyBhcyB3ZSBkb24ndCB1c2UgaXQgZGlyZWN0bHkKICAgIAogICAgZ3VpID0gV2FsbGV0R1VJKG9uX2dlbmVyYXRlX2FkZHJlc3MsIHZpZXdfa2V5cywgV2FsbGV0R1VJLmNvcHlfdG9fY2xpcGJvYXJkKQogICAgZ3VpLnNob3dfcGluX3dpbmRvdyhvbl9waW5fZW50cnksIHBpbikKCiAgICByb290Lm1haW5sb29wKCkgICMgU3RhcnQgdGhlIG1haW4gVGtpbnRlciBldmVudCBsb29wCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAG8RAAAAAAAAAAAAAAAA8L8"
				],
				[
					523,
					1,
					"paste",
					null,
					"AgAAAMIMAAAAAAAAbxEAAAAAAAAAAAAAbxEAAAAAAABvEQAAAAAAAAgAAABkZWYgdmlldw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCDAAAAAAAAMoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"paste",
					null,
					"AgAAAAAAAAAAAAAA7yIAAAAAAAAAAAAA7yIAAAAAAADvIgAAAAAAAG8RAABpbXBvcnQgb3MKaW1wb3J0IGpzb24KZnJvbSB0a2ludGVyIGltcG9ydCBUaywgbWVzc2FnZWJveApmcm9tIGNyeXB0b2dyYXBoeS5mZXJuZXQgaW1wb3J0IEZlcm5ldApmcm9tIGV0aF9hY2NvdW50IGltcG9ydCBBY2NvdW50CmZyb20gYml0Y29pbmxpYi53YWxsZXRzIGltcG9ydCBXYWxsZXQKZnJvbSBndWkgaW1wb3J0IFdhbGxldEdVSQoKV0FMTEVUX0ZJTEUgPSAid2FsbGV0X2luZm8uZW5jIgpQSU5fRklMRSA9ICJwaW4uZW5jIgoKZGVmIGxvYWRfa2V5KCk6CiAgICBpZiBvcy5wYXRoLmV4aXN0cygic2VjcmV0LmtleSIpOgogICAgICAgIHdpdGggb3Blbigic2VjcmV0LmtleSIsICJyYiIpIGFzIGtleV9maWxlOgogICAgICAgICAgICByZXR1cm4ga2V5X2ZpbGUucmVhZCgpCiAgICBlbHNlOgogICAgICAgIGtleSA9IEZlcm5ldC5nZW5lcmF0ZV9rZXkoKQogICAgICAgIHdpdGggb3Blbigic2VjcmV0LmtleSIsICJ3YiIpIGFzIGtleV9maWxlOgogICAgICAgICAgICBrZXlfZmlsZS53cml0ZShrZXkpCiAgICAgICAgcmV0dXJuIGtleQoKZGVmIGVuY3J5cHQoZGF0YSwga2V5KToKICAgIGYgPSBGZXJuZXQoa2V5KQogICAgcmV0dXJuIGYuZW5jcnlwdChkYXRhLmVuY29kZSgpKQoKZGVmIGRlY3J5cHQoZGF0YSwga2V5KToKICAgIGYgPSBGZXJuZXQoa2V5KQogICAgcmV0dXJuIGYuZGVjcnlwdChkYXRhKS5kZWNvZGUoKQoKZGVmIGdldF9waW4oa2V5KToKICAgIGlmIG9zLnBhdGguZXhpc3RzKFBJTl9GSUxFKToKICAgICAgICB3aXRoIG9wZW4oUElOX0ZJTEUsICJyYiIpIGFzIHBpbl9maWxlOgogICAgICAgICAgICBlbmNyeXB0ZWRfcGluID0gcGluX2ZpbGUucmVhZCgpCiAgICAgICAgcGluID0gZGVjcnlwdChlbmNyeXB0ZWRfcGluLCBrZXkpCiAgICBlbHNlOgogICAgICAgIHBpbiA9IE5vbmUKICAgIHJldHVybiBwaW4KCmRlZiBzZXRfcGluKG5ld19waW4sIGtleSk6CiAgICBlbmNyeXB0ZWRfcGluID0gZW5jcnlwdChuZXdfcGluLCBrZXkpCiAgICB3aXRoIG9wZW4oUElOX0ZJTEUsICJ3YiIpIGFzIHBpbl9maWxlOgogICAgICAgIHBpbl9maWxlLndyaXRlKGVuY3J5cHRlZF9waW4pCgpkZWYgdmVyaWZ5X3BpbihzdG9yZWRfcGluLCBlbnRlcmVkX3Bpbik6CiAgICBpZiBlbnRlcmVkX3BpbiA9PSBzdG9yZWRfcGluOgogICAgICAgIHJldHVybiBUcnVlCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJJbmNvcnJlY3QgUElOLiIpCiAgICAgICAgcmV0dXJuIEZhbHNlCgpkZWYgbG9hZF93YWxsZXRfaW5mbyhrZXkpOgogICAgaWYgb3MucGF0aC5leGlzdHMoV0FMTEVUX0ZJTEUpOgogICAgICAgIHdpdGggb3BlbihXQUxMRVRfRklMRSwgInJiIikgYXMgd2FsbGV0X2ZpbGU6CiAgICAgICAgICAgIGVuY3J5cHRlZF9kYXRhID0gd2FsbGV0X2ZpbGUucmVhZCgpCiAgICAgICAgcmV0dXJuIGpzb24ubG9hZHMoZGVjcnlwdChlbmNyeXB0ZWRfZGF0YSwga2V5KSkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0X2luZm8gPSB7CiAgICAgICAgICAgICJiaXRjb2luIjogeyJ3YWxsZXQiOiAiYml0Y29pbl93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJiaXRjb2luX3ByaXZhdGVfa2V5IiwgImJhbGFuY2UiOiAwLjB9LAogICAgICAgICAgICAiZXRoZXJldW0iOiB7IndhbGxldCI6ICJldGhlcmV1bV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJldGhlcmV1bV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfSwKICAgICAgICAgICAgInhycCI6IHsid2FsbGV0IjogInhycF93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJ4cnBfcHJpdmF0ZV9rZXkiLCAiYmFsYW5jZSI6IDAuMH0sCiAgICAgICAgICAgICJzaGliYV9pbnUiOiB7IndhbGxldCI6ICJzaGliYV93YWxsZXRfYWRkcmVzcyIsICJwcml2YXRlX2tleSI6ICJzaGliYV9wcml2YXRlX2tleSIsICJiYWxhbmNlIjogMC4wfQogICAgICAgIH0KICAgICAgICByZXR1cm4gd2FsbGV0X2luZm8KCmRlZiBzYXZlX3dhbGxldF9pbmZvKHdhbGxldF9pbmZvLCBrZXkpOgogICAgd2l0aCBvcGVuKFdBTExFVF9GSUxFLCAid2IiKSBhcyB3YWxsZXRfZmlsZToKICAgICAgICBlbmNyeXB0ZWRfZGF0YSA9IGVuY3J5cHQoanNvbi5kdW1wcyh3YWxsZXRfaW5mbyksIGtleSkKICAgICAgICB3YWxsZXRfZmlsZS53cml0ZShlbmNyeXB0ZWRfZGF0YSkKCmRlZiBnZW5lcmF0ZV9uZXdfYWRkcmVzcyhjcnlwdG9fdHlwZSk6CiAgICBpZiBjcnlwdG9fdHlwZSA9PSAiZXRoZXJldW0iOgogICAgICAgIGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZSgpCiAgICAgICAgcmV0dXJuIGFjY291bnQuYWRkcmVzcywgYWNjb3VudC5rZXkuaGV4KCkKICAgIGVsc2U6CiAgICAgICAgd2FsbGV0ID0gV2FsbGV0LmNyZWF0ZShmJ1VTQldhbGxldF97Y3J5cHRvX3R5cGV9JykKICAgICAgICBrZXkgPSB3YWxsZXQubmV3X2tleSgpCiAgICAgICAgcmV0dXJuIGtleS5hZGRyZXNzLCBrZXkucHJpdmF0ZV9oZXgKCmRlZiBvbl9waW5fZW50cnkoZXZlbnQ9Tm9uZSk6CiAgICBzdG9yZWRfcGluID0gZ2V0X3BpbihrZXkpCiAgICBlbnRlcmVkX3BpbiA9IGd1aS5waW5fZW50cnkuZ2V0KCkKICAgIGlmIHN0b3JlZF9waW46CiAgICAgICAgaWYgdmVyaWZ5X3BpbihzdG9yZWRfcGluLCBlbnRlcmVkX3Bpbik6CiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LmRlc3Ryb3koKSAgIyBDbG9zZSB0aGUgUElOIHdpbmRvdyBhZnRlciBzdWNjZXNzZnVsIHZlcmlmaWNhdGlvbgogICAgICAgICAgICBndWkub3Blbl93YWxsZXRfd2luZG93KGxvYWRfd2FsbGV0X2luZm8oa2V5KSwga2V5KQogICAgZWxzZToKICAgICAgICBjb25maXJtX3BpbiA9IGd1aS5waW5fY29uZmlybV9lbnRyeS5nZXQoKQogICAgICAgIGlmIGVudGVyZWRfcGluID09IGNvbmZpcm1fcGluOgogICAgICAgICAgICBzZXRfcGluKGVudGVyZWRfcGluLCBrZXkpCiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2luZm8oIlN1Y2Nlc3MiLCAiTmV3IFBJTiBzZXQgc3VjY2Vzc2Z1bGx5LiIpCiAgICAgICAgICAgIGd1aS5waW5fd2luZG93LmRlc3Ryb3koKSAgIyBDbG9zZSB0aGUgUElOIHdpbmRvdyBhZnRlciBzZXR0aW5nIHRoZSBuZXcgUElOCiAgICAgICAgICAgIGd1aS5vcGVuX3dhbGxldF93aW5kb3cobG9hZF93YWxsZXRfaW5mbyhrZXkpLCBrZXkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbWVzc2FnZWJveC5zaG93ZXJyb3IoIkVycm9yIiwgIlBJTnMgZG8gbm90IG1hdGNoLiBUcnkgYWdhaW4uIikKCmRlZiB2aWV3X2tleXMoY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIGlmIGNyeXB0b190eXBlIGluIHdhbGxldF9pbmZvOgogICAgICAgIHB1Yl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bIndhbGxldCJdCiAgICAgICAgcHJpdl9rZXkgPSB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0KICAgICAgICBtZXNzYWdlYm94LnNob3dpbmZvKGYie2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0gS2V5cyIsIGYiUHVibGljIEtleToge3B1Yl9rZXl9XG5Qcml2YXRlIEtleToge3ByaXZfa2V5fSIpCiAgICBlbHNlOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsIGYiTm8ga2V5cyBmb3VuZCBmb3Ige2NyeXB0b190eXBlLmNhcGl0YWxpemUoKX0uIikKCmRlZiBvbl9nZW5lcmF0ZV9hZGRyZXNzKHdhbGxldF9mcmFtZSwgY3J5cHRvX3R5cGUpOgogICAgd2FsbGV0X2luZm8gPSBsb2FkX3dhbGxldF9pbmZvKGtleSkKICAgIG5ld19hZGRyZXNzLCBwcml2YXRlX2tleSA9IGdlbmVyYXRlX25ld19hZGRyZXNzKGNyeXB0b190eXBlKQogICAgd2FsbGV0X2luZm9bY3J5cHRvX3R5cGVdWyJ3YWxsZXQiXSA9IG5ld19hZGRyZXNzCiAgICB3YWxsZXRfaW5mb1tjcnlwdG9fdHlwZV1bInByaXZhdGVfa2V5Il0gPSBwcml2YXRlX2tleQogICAgc2F2ZV93YWxsZXRfaW5mbyh3YWxsZXRfaW5mbywga2V5KQoKICAgICMgUmVmcmVzaCB3YWxsZXQgd2luZG93CiAgICBndWkub3Blbl93YWxsZXRfd2luZG93KHdhbGxldF9pbmZvLCBrZXkpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAga2V5ID0gbG9hZF9rZXkoKQogICAgcGluID0gZ2V0X3BpbihrZXkpCgogICAgcm9vdCA9IFRrKCkgICMgQ3JlYXRlIHRoZSBtYWluIFRraW50ZXIgcm9vdCB3aW5kb3cKICAgIHJvb3Qud2l0aGRyYXcoKSAgIyBIaWRlIHRoZSBtYWluIHdpbmRvdyBhcyB3ZSBkb24ndCB1c2UgaXQgZGlyZWN0bHkKICAgIAogICAgZ3VpID0gV2FsbGV0R1VJKG9uX2dlbmVyYXRlX2FkZHJlc3MsIHZpZXdfa2V5cywgV2FsbGV0R1VJLmNvcHlfdG9fY2xpcGJvYXJkKQogICAgZ3VpLnNob3dfcGluX3dpbmRvdyhvbl9waW5fZW50cnksIHBpbikKCiAgICByb290Lm1haW5sb29wKCkgICMgU3RhcnQgdGhlIG1haW4gVGtpbnRlciBldmVudCBsb29wCg",
					"AQAAAAAAAAABAAAAAAAAAAAAAABvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAAMsiAAAAAAAA0icAAAAAAAAAAAAA0icAAAAAAADSJwAAAAAAACQAAAAgICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Vib3g",
					"AQAAAAAAAAABAAAAyyIAAAAAAADvIgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"right_delete",
					null,
					"AQAAAMAbAAAAAAAAwBsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAwBsAAAAAAADAGwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"paste",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADRJwAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"paste",
					null,
					"AgAAAMwiAAAAAAAA1icAAAAAAAAAAAAA1icAAAAAAADWJwAAAAAAAD0AAAAgICAgICAgIGVsc2U6CiAgICAgICAgICAgIG1lc3NhZ2Vib3guc2hvd2Vycm9yKCJFcnJvciIsICJQSU5z",
					"AQAAAAAAAAABAAAAzCIAAAAAAAAJIwAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"right_delete",
					null,
					"AQAAAHsZAAAAAAAAexkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAexkAAAAAAAB7GQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"right_delete",
					null,
					"AQAAAMAbAAAAAAAAwBsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAwBsAAAAAAADAGwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"gitsavvy:",
				"GitSavvy: help"
			],
			[
				"pack",
				"Package Control: List Packages"
			],
			[
				"gitsa",
				"GitSavvy: help"
			],
			[
				"package control: ins",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Paulj/Desktop/Cold wallet/gui.py",
		"/C/Users/Paulj/Desktop/Cold wallet/theme_config.py",
		"/C/Users/Paulj/Desktop/Cold wallet/autorun.inf",
		"/C/Users/Paulj/Desktop/Cold wallet/requirements.txt",
		"/C/Users/Paulj/Desktop/Cold wallet/utils/helpers.py",
		"/C/Users/Paulj/Desktop/Cold wallet/config/settings.py",
		"/C/Users/Paulj/Desktop/Cold wallet/crypto/cryptography.py",
		"/C/Users/Paulj/Desktop/Cold wallet/gui/crypto_management.py",
		"/C/Users/Paulj/Desktop/Cold wallet/gui/pin_entry.py",
		"/C/Users/Paulj/Desktop/Cold wallet/config/data.json",
		"/C/Users/Paulj/Desktop/Cold wallet/main.py",
		"/C/Users/Paulj/Desktop/Cold wallet/gui/helpers.py",
		"/C/Users/Paulj/Desktop/Cold wallet/update_build.bat",
		"/C/Users/Paulj/Desktop/Cold wallet/gui_pin_management.py",
		"/C/Users/Paulj/Desktop/Cold wallet/encryption_key_management.py",
		"/C/Users/Paulj/Documents/GitHub/Website/script.js"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10196,
						"regions":
						{
						},
						"selection":
						[
							[
								7104,
								7104
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2721.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "cold wallet code.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 256.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
